/*
============================================
; Title: VerifySecurityQuestionsFormComponent
; Author: Professor Krasso
; Date:   25 Apr 2021
; Modified by: Anil Rayamajhi
;===========================================
*/
// This was autogenerated
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
// Imported
import { HttpClient } from '@angular/common/http';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ISecurityQuestion } from '../../shared/security-question.interface';

@Component({
  selector: 'app-verify-security-questions-form',
  templateUrl: './verify-security-questions-form.component.html',
  styleUrls: ['./verify-security-questions-form.component.css'],
})
export class VerifySecurityQuestionsFormComponent implements OnInit {
  /**
   * Properties
   */
  selectedSecurityQuestions: ISecurityQuestion[];
  username: string;
  question1: string;
  question2: string;
  question3: string;
  form: FormGroup;
  errorMessage: string;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private http: HttpClient,
    private fb: FormBuilder
  ) {
    // Username
    this.username = this.route.snapshot.queryParamMap.get('username');

    this.http.get(`/api/users/${this.username}/security-questions`).subscribe(
      (res) => {
        this.selectedSecurityQuestions = res['data'];
        console.log(this.selectedSecurityQuestions);
        console.log(res);
        if (!this.selectedSecurityQuestions.length) {
          this.router.navigate(['/']);
        }
      },
      (err) => console.log(err),
      () => {
        this.question1 = this.selectedSecurityQuestions[0]['questionText'];
        this.question2 = this.selectedSecurityQuestions[1]['questionText'];
        this.question3 = this.selectedSecurityQuestions[2]['questionText'];

        console.log(this.question1);
        console.log(this.question2);
        console.log(this.question3);
      }
    );
  }

  ngOnInit(): void {
    this.form = this.fb.group({
      answerToSecurityQuestion1: [
        null,
        Validators.compose([Validators.required]),
      ],
      answerToSecurityQuestion2: [
        null,
        Validators.compose([Validators.required]),
      ],
      answerToSecurityQuestion3: [
        null,
        Validators.compose([Validators.required]),
      ],
    });
  }

  /**
   * Verify Security Questions
   */
  verifySecurityQuestions() {
    const answerToSecurityQuestion1 = this.form.controls[
      'answerToSecurityQuestion1'
    ].value;
    const answerToSecurityQuestion2 = this.form.controls[
      'answerToSecurityQuestion2'
    ].value;
    const answerToSecurityQuestion3 = this.form.controls[
      'answerToSecurityQuestion3'
    ].value;

    console.log(answerToSecurityQuestion1);
    console.log(answerToSecurityQuestion2);
    console.log(answerToSecurityQuestion3);

    this.http
      .post(`/api/session/verify/users/${this.username}/security-questions`, {
        questionText1: this.question1,
        questionText2: this.question2,
        questionText3: this.question3,
        answerText1: answerToSecurityQuestion1,
        answerText2: answerToSecurityQuestion2,
        answerText3: answerToSecurityQuestion3,
      })
      .subscribe((res) => {
        console.log(res);

        if (res['message'] === 'success') {
          this.router.navigate(['/session/reset-password'], {
            queryParams: { isAuthenticated: 'true', username: this.username },
            skipLocationChange: true,
          });
        } else {
          console.log('Unable to verify security question answers');
          this.errorMessage =
            'Unable to verify account. Responses did not match with the existing records';
        }
      });
  }
}
